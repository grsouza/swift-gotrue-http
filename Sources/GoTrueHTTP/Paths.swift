// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var settings: Settings {
        Settings(path: "/settings")
    }

    public struct Settings {
        /// Path: `/settings`
        public let path: String

        public var get: Request<GoTrueHTTP.SettingsResponse> {
            .get(path)
        }
    }
}

extension Paths {
    public static var verify: Verify {
        Verify(path: "/verify")
    }

    public struct Verify {
        /// Path: `/verify`
        public let path: String

        public func post(_ body: GoTrueHTTP.VerificationRequest) -> Request<GoTrueHTTP.VerificationResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var token: Token {
        Token(path: "/token")
    }

    public struct Token {
        /// Path: `/token`
        public let path: String

        public func post(grantType: GrantType, redirectURL: URL? = nil, _ body: GoTrueHTTP.TokenRequest) -> Request<GoTrueHTTP.Session> {
            .post(path, query: makePostQuery(grantType, redirectURL), body: body)
        }

        private func makePostQuery(_ grantType: GrantType, _ redirectURL: URL?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(grantType, forKey: "grant_type")
            encoder.encode(redirectURL, forKey: "redirect_url")
            return encoder.items
        }

        public enum GrantType: String, Codable, CaseIterable {
            case password
            case refreshToken = "refresh_token"
        }
    }
}

extension Paths {
    public static var signup: Signup {
        Signup(path: "/signup")
    }

    public struct Signup {
        /// Path: `/signup`
        public let path: String

        public func post(redirectURL: URL? = nil, _ body: PostRequest? = nil) -> Request<PostResponse> {
            .post(path, query: makePostQuery(redirectURL), body: body)
        }

        public enum PostResponse: Decodable {
            case session(GoTrueHTTP.Session)
            case user(GoTrueHTTP.User)

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(GoTrueHTTP.Session.self) {
                    self = .session(value)
                } else if let value = try? container.decode(GoTrueHTTP.User.self) {
                    self = .user(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }
        }

        private func makePostQuery(_ redirectURL: URL?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(redirectURL, forKey: "redirect_url")
            return encoder.items
        }

        public struct PostRequest: Encodable {
            public var email: String?
            public var password: String?
            public var phone: String?
            public var data: [String: AnyJSON]?
            public var gotrueMetaSecurity: GotrueMetaSecurity?

            public struct GotrueMetaSecurity: Encodable {
                public var hcaptchaToken: String?

                public init(hcaptchaToken: String? = nil) {
                    self.hcaptchaToken = hcaptchaToken
                }

                private enum CodingKeys: String, CodingKey {
                    case hcaptchaToken = "hcaptcha_token"
                }
            }

            public init(email: String? = nil, password: String? = nil, phone: String? = nil, data: [String: AnyJSON]? = nil, gotrueMetaSecurity: GotrueMetaSecurity? = nil) {
                self.email = email
                self.password = password
                self.phone = phone
                self.data = data
                self.gotrueMetaSecurity = gotrueMetaSecurity
            }

            private enum CodingKeys: String, CodingKey {
                case email
                case password
                case phone
                case data
                case gotrueMetaSecurity = "gotrue_meta_security"
            }
        }
    }
}

public enum Paths {}
